#Getting the user data.
query SessionQuery {
    viewer:Viewer {
        id
        name
    }
}
query AiringQuery ($startDate: Int, $endDate: Int) {
    Page {
        pageInfo {
            total
            currentPage
            lastPage
            hasNextPage
            perPage
        }
        airingSchedules(
            airingAt_greater: $startDate,
            airingAt_lesser:$endDate,
            sort: [TIME],
            notYetAired:true
        ) {
            airingAt
            episode
            media {...HomeMedia}
        }
    }
}



#Getting the user data.
query UserQuery($id: Int) {
    user:User(id: $id) {
        id
        name
        about(asHtml: false)
        avatar {
            large
            medium
        }
        bannerImage
        mediaListOptions {
            scoreFormat
            rowOrder
            animeList {
                sectionOrder
                splitCompletedSectionByFormat
                customLists
                advancedScoring
                advancedScoringEnabled
            }
            mangaList {
                sectionOrder
                splitCompletedSectionByFormat
                customLists
                advancedScoring
                advancedScoringEnabled
            }
        }
        statistics {
            anime {
                count
                meanScore
                standardDeviation
                minutesWatched
                episodesWatched
                chaptersRead
                volumesRead
            }
            manga {
                count
                meanScore
                standardDeviation
                minutesWatched
                episodesWatched
                chaptersRead
                volumesRead
            }
        }
        isFollowing
        isFollower
        donatorTier
        donatorBadge
        moderatorRoles
        siteUrl
    }
}


query GetFollowersList($id:Int!,$page:Int){
    Page(page:$page){
        pageInfo{
            total
            perPage
            currentPage
            lastPage
            hasNextPage
        }
        followers(userId:$id,sort:USERNAME){
            id
            name
            avatar{
                large
            }
        }
        following(userId:$id,sort:USERNAME){
            id
            name
            avatar{
                large
            }
        }
    }
}

#A GraphQL query that is requesting the anime list of a user.
query AnimeListCollectionQuery(
    $userId: Int
) {
    media:MediaListCollection(
        userId: $userId,
        type: ANIME
    ) {
        lists {
            entries {
                id
                status
                score
                progress
                repeat
                priority
                private
                notes
                hiddenFromStatusLists
                customLists
                advancedScores
                startedAt {
                    year
                    month
                    day
                }
                completedAt {
                    year
                    month
                    day
                }

                updatedAt
                createdAt
                media {...HomeMedia}
            }
            name
            isCustomList
            isSplitCompletedList
            status
        }
    }
}

#Getting the trending anime.
query TrendingMediaQuery{
    page:Page(
        page: 1,
        perPage: 10
    ) {
        media(type: ANIME, sort: [TRENDING_DESC]) {
            id
            title {
                romaji
                userPreferred
            }
            averageScore
            favourites
            coverImage {
                large
            }
            bannerImage
            description(asHtml: true)
            genres
            studios (isMain: true) {
                edges {
                    node {
                        id
                        name
                    }
                }
            }
            staff {
                edges {
                    node {
                        id
                        name {
                            full
                        }
                    }
                    role
                }
            }
        }
    }
}

#gets user favorite animes
query FavoritesAnimeQuery($id: Int, $page: Int) {
    user:User(id: $id) {
        id
        name
        favourites {
            anime(page: $page) {
                edges {
                    node {
                        ...HomeMedia
                    }
                    favouriteOrder
                }
                pageInfo {
                    total
                    perPage
                    currentPage
                    lastPage
                    hasNextPage
                }
            }
        }
    }
}

#GetAnime data by searching
query SearchAnimeQuery(
    $search: String,
    $page: Int,
    $sortType: [MediaSort]
) {
    page:Page (page: $page, perPage: 30) {
        media (
            search: $search,
            type: ANIME,
            sort: $sortType
        ) {...HomeMedia},
    }
}

query SearchUsersQuery(
    $search: String,
    $page: Int
) {
    page:Page(page: $page, perPage: 30){
        users(search: $search) {
            id
            name
            avatar {
                large
            }
            about
            siteUrl
        }}
}


#Updating the list of the user.
mutation EditList(
    $mediaID: Int,
    $progress: Int,
    $scoreRaw:Int,
    $status:MediaListStatus,
    $start:FuzzyDateInput,
    $completed:FuzzyDateInput
) {
    saveMedia:SaveMediaListEntry(
        mediaId: $mediaID,
        progress: $progress,
        scoreRaw: $scoreRaw,
        status:$status,
        startedAt: $start,
        completedAt: $completed
    ) {
        score(format:POINT_10_DECIMAL)
        startedAt{
            year
            month
            day
        }
        completedAt{
            year
            month
            day
        }
    }
}

#It deletes the anime from the list.
mutation DeleteMedia($id:Int){
    deleteMedia:DeleteMediaListEntry(id:$id){
        deleted
    }
}


#marks anime as favorite
#mutation ToggleFavouriteMutation($animeId: Int) {
#    toggle:ToggleFavourite(animeId: $animeId) {
#        anime {
#            nodes {
#                id
#                isFavourite
#            }
#        }
#    }
#}
mutation ToggleFavouriteMutation($animeId:Int,
    $mangaId:Int,
    $characterId:Int,
    $staffId:Int,
    $studioId:Int)
{
    toggle:ToggleFavourite(animeId:$animeId
        mangaId:$mangaId
        characterId:$characterId
        staffId:$staffId
        studioId:$studioId
    ){anime{pageInfo{total}}manga{pageInfo{total}}characters{pageInfo{total}}staff{pageInfo{total}}studios{pageInfo{total}}}}
mutation ToggleFollowUser($userId:Int) {
    follow:ToggleFollow(userId: $userId){
        id
        name
        isFollowing
        isFollower
    }

}

mutation MarkEpisodeWatched($mediaId: Int!, $episodeNumber: Int!) {
    markWatched:SaveMediaListEntry(
        mediaId: $mediaId,
        progress: $episodeNumber,
        status: CURRENT
    ) {
        id
        status
        progress
    }
}

query HomeDataQuery{
    trendingAnime: Page(page: 1, perPage: 50) {
        media(type: ANIME, status:RELEASING sort: [TRENDING_DESC], isAdult: false) {
            ...HomeMedia
        }
    }

    popularAnime: Page(page: 1, perPage:50) {
        media(type: ANIME,status_in:[FINISHED]  sort: [POPULARITY_DESC], isAdult: false) {
            ...HomeMedia
        }
    }

    movies: Page(page: 1, perPage:50) {
        media(type: ANIME, format: MOVIE  status_in:[FINISHED] sort: [POPULARITY_DESC], isAdult: false) {
            ...HomeMedia
        }
    }


    review: Page(page: 1, perPage: 50) {
        reviews(sort: [RATING_DESC])    {
            id
            userId
            mediaId
            mediaType
            summary
            body
            rating
            ratingAmount
            score
            user {
                id
                name
                avatar {
                    large
                    medium
                }
            }
            media {
                ...HomeMedia
            }
        }
    }
}

fragment HomeMedia on Media {
    id
    idMal
    title {
        romaji
        userPreferred
    }
    type
    isFavourite
    countryOfOrigin
    status(version: 2)
    format
    description(asHtml: false)
    coverImage {
        extraLarge
        large
        medium
    }
    streamingEpisodes {
        title
        thumbnail
    }
    nextAiringEpisode {
        airingAt
        episode
    }
    bannerImage
    genres
    averageScore
    favourites
    startDate {
        year
        month
        day
    }
    mediaListEntry {
        id
        status
    }
}

query Notifications($page: Int) {
    page: Page(page: $page, perPage: 20) {
        notifications(resetNotificationCount: false) {
            ... on FollowingNotification {
                context
                createdAt
                id
                type
                user {
                    id
                    name
                    avatar {
                        large
                        medium
                    }
                }
                userId
            }
            ... on AiringNotification {
                id
                episode
                createdAt
                contexts
                media {
                    ...HomeMedia
                }
                type
            }
            ... on ActivityLikeNotification {
                activity {
                    ... on ListActivity {
                        id
                        type
                        createdAt
                        status
                        progress
                        media {
                            ...HomeMedia
                        }
                    }
                    ... on MessageActivity {
                        id
                        type
                        createdAt
                        message
                        recipient {
                            id
                            name
                            avatar {
                                large
                                medium
                            }
                        }
                    }
                    ... on TextActivity {
                        id
                        type
                        createdAt
                        text
                    }
                }
                context
                createdAt
                id
                type
                user {
                    id
                    name
                    avatar {
                        large
                        medium
                    }
                }
                userId
            }
            ... on ActivityMessageNotification {
                context
                createdAt
                id
                type
                user {
                    id
                    name
                    avatar {
                        large
                        medium
                    }
                }
                userId
            }
            ... on ActivityMentionNotification {
                context
                createdAt
                id
                type
                user {
                    id
                    name
                    avatar {
                        large
                        medium
                    }
                }
                userId
            }
            ... on ActivityReplyNotification {
                context
                createdAt
                id
                type
                user {
                    id
                    name
                    avatar {
                        large
                        medium
                    }
                }
                userId
            }
            ... on ThreadCommentMentionNotification {
                context
                createdAt
                id
                type
                user {
                    id
                    name
                    avatar {
                        large
                        medium
                    }
                }
                userId
            }
            ... on ThreadCommentReplyNotification {
                context
                createdAt
                id
                type
                user {
                    id
                    name
                    avatar {
                        large
                        medium
                    }
                }
                userId
            }
        }
    }
}


mutation SaveMediaMutation ($id: Int!, $status: MediaListStatus!) {
    saveMedia : SaveMediaListEntry (
        mediaId: $id,
        status: $status
    ) {
        id
        status
    }
}

mutation SaveMediaListEntryMutation(
    $mediaId: Int!,
    $episodesWatched: Int!
) {
    SaveMediaListEntry(
        mediaId: $mediaId,
        progress: $episodesWatched
    ) {
        id
        progress
    }
}


mutation AnimeListEntryMutation(
    $id: Int,
    $mediaId: Int,
    $status: MediaListStatus,
    $priority: Int,
    $startedAt: FuzzyDateInput,
    $completedAt: FuzzyDateInput
) {
    saveMediaListEntry:SaveMediaListEntry(
        id: $id,
        mediaId: $mediaId,
        status: $status,
        priority: $priority,
        startedAt: $startedAt,
        completedAt: $completedAt
    ) {
        id
        status
        score
        progress
        repeat
        priority
        private
        notes
        hiddenFromStatusLists
        customLists
        advancedScores
        startedAt {
            year
            month
            day
        }
        completedAt {
            year
            month
            day
        }
        updatedAt
        createdAt
        media {
            id
            title {
                romaji
                english
                native
                userPreferred
            }
            type
            format
            status(version: 2)
            startDate {
                year
                month
                day
            }
            season
            seasonYear
            episodes
            duration
            countryOfOrigin
            source
            isFavourite
            coverImage {
                extraLarge
                large
            }
            genres
            synonyms
            averageScore
            popularity
            isAdult
            nextAiringEpisode {
                id
                airingAt
                timeUntilAiring
                episode
                mediaId
            }
            externalLinks {
                site
            }
            siteUrl
        }
    }
}

