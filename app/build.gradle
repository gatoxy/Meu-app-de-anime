import groovy.json.JsonBuilder

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs'
    id 'kotlin-parcelize'
    id 'com.google.gms.google-services'
    id 'dagger.hilt.android.plugin'
    id 'com.google.firebase.crashlytics'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
    id "com.apollographql.apollo3" version("3.8.2")
//    id 'com.onesignal.androidsdk.onesignal-gradle-plugin'
    id "org.jlleitschuh.gradle.ktlint" version("11.0.0")
    id "org.jetbrains.kotlin.plugin.serialization" version '1.8.21'
//    id("com.google.devtools.ksp") version "1.8.10-1.0.9"
}

android {
    signingConfigs {
        release {
            storeFile file('/Users/kl3jvi/StudioProjects/animity/animity')
            storePassword 'klejvi123'
            keyPassword 'klejvi123'
            keyAlias 'key0'
        }
    }

    compileSdk 34
    defaultConfig {
        namespace "com.kl3jvi.animity"
        applicationId "com.kl3jvi.animity"
        minSdk 21
        targetSdk 34
        versionCode 19
        versionName "1.1.9"
        archivesBaseName = "Animity-v$versionName"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    ndkVersion "25.1.8937393"

    buildTypes {
        debug {
            debuggable true
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable false
            signingConfig signingConfigs.release

            // Here we add a dependency to generate versionInfo.json
            applicationVariants.all { variant ->
                variant.assembleProvider.configure {
                    dependsOn generateVersionJson
                }
            }
        }
        benchmark {
            signingConfig signingConfigs.debug
            matchingFallbacks = ['release']
            debuggable false
        }
    }
    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }

    kapt {
        useBuildCache true
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/atomicfu.kotlin_module']
        }
    }

    splits {
        abi {
            enable true
            reset()
            include "x86", "armeabi-v7a", "arm64-v8a", "x86_64"
            universalApk true
        }
    }
    lint {
        checkReleaseBuilds false
    }

    buildTypes {
        benchmark {
            signingConfig signingConfigs.debug
            matchingFallbacks = ['release']
            debuggable false
        }
    }

}
kapt {
    correctErrorTypes = true
}

ktlint {
    android = true
    ignoreFailures = false
    reporters {
        reporter "plain"
        reporter "checkstyle"
        reporter "sarif"
    }
}

apollo {
    service("service") {
        packageName.set("com.kl3jvi.animity")
        excludes.add("**/schema.json.graphql")
    }
}

tasks.register('generateVersionJson') {
    doLast {
        def versionCodes = ["x86", "armeabi-v7a", "arm64_v8a", "x86_64", "universal"]
        def animityInfo = [:]
        def androidExtension = project.extensions.getByType(com.android.build.gradle.BaseExtension.class)
        versionCodes.each { versionCode ->
            def versionName = androidExtension.defaultConfig.versionName
            def patchVersion = versionName.split("\\.")[2].toInteger()
            def releaseTagParts = "0.2.0".split("\\.").collect { it.toInteger() }
            releaseTagParts[2] += patchVersion - 4
            if (releaseTagParts[2] > 9) {
                releaseTagParts[2] = 0
                releaseTagParts[1] += 1
                if (releaseTagParts[1] > 9) {
                    releaseTagParts[1] = 0
                    releaseTagParts[0] += 1
                }
            }

            def releaseTag = releaseTagParts.join(".")
            def archivesBaseName = "Animity-v${versionName}"
            def versionCodeNumber = androidExtension.defaultConfig.versionCode
            def updateMessage = "New update available" // Replace with the actual update message

            // Find the APK and calculate its size
            def apkFile = file("${rootDir}/app/release/${archivesBaseName}-${versionCode}-release.apk")
            def apkSize = apkFile.exists() ? String.format("%.2fMB", apkFile.length() / 1024.0 / 1024.0) : "Unknown size"

            animityInfo[versionCode] = [
                    "versionCode"   : versionCodeNumber,
                    "versionName"   : versionName,
                    "direct_link"   : "https://github.com/kl3jvi/animity/releases/download/v${releaseTag}/${archivesBaseName}-${versionCode}-release.apk",
                    "update_message": updateMessage,
                    "apkSize"       : apkSize
            ]
        }

        def jsonData = ["Animity": animityInfo]
        new File("${projectDir}/versionInfo.json").write(new JsonBuilder(jsonData).toPrettyString())
    }
}


dependencies {
    implementation libs.androidx.preference.ktx
    implementation libs.androidx.legacy.support.v4
    implementation libs.firebase.firestore.ktx
    implementation libs.androidx.coordinatorlayout
    implementation libs.androidx.core.ktx
    implementation libs.androidx.swiperefreshlayout
    implementation libs.androidx.appcompat
    implementation libs.material
    implementation libs.firebase.perf.ktx
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.navigation.runtime.ktx
    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx
    implementation libs.kotlinx.coroutines.android
    implementation libs.kotlinx.coroutines.core
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.firebase.analytics.ktx
    implementation libs.firebase.dynamic.links
    implementation libs.firebase.crashlytics.ktx
    implementation(libs.kotlinx.serialization.json)
    implementation libs.firebase.config.ktx


    implementation libs.hilt.android
    implementation libs.fragment.ktx
    kapt(libs.hilt.android.compiler)

    implementation libs.retrofit2.retrofit
    implementation libs.retrofit2.converter.gson
    implementation libs.okhttp3.logging.interceptor
    implementation libs.okhttp3.okhttp.dnsoverhttps

    implementation libs.jsoup

    implementation libs.androidx.room.ktx
    kapt libs.androidx.room.compiler

    //Video Player
    implementation libs.exoplayer
    implementation libs.extension.cast
    implementation libs.extension.okhttp
    implementation libs.extension.mediasession
    implementation libs.extension.workmanager


    //Expandable TextView
    implementation libs.expandableTextView

    //animation lib
    implementation libs.lottie
    implementation libs.glide
    kapt libs.compiler
    implementation(libs.okhttp3.integration) {
        exclude group: 'glide-parent'
    }
    implementation libs.androidx.core.splashscreen
    implementation libs.commons.text
    implementation libs.androidx.paging.runtime.ktx
    implementation libs.androidx.browser
    implementation libs.apollo.runtime
    implementation libs.androidx.datastore.preferences
    implementation libs.avatarview.coil
    implementation libs.rhino


    implementation libs.epoxy
    implementation libs.epoxy.databinding
    implementation libs.epoxy.paging3
    kapt libs.epoxy.processor

//    implementation libs.one.signal
    implementation libs.core
    debugImplementation libs.library
    releaseImplementation libs.library.no.op
    implementation libs.gson
    implementation libs.appupdate
    implementation libs.androidx.work.runtime.ktx
    implementation libs.androidx.hilt.work
    kapt libs.androidx.hilt.compiler

    implementation libs.androidx.startup.runtime
    implementation libs.android.joda


    testImplementation libs.turbine
    testImplementation libs.junit
    testImplementation libs.androidx.core
    testImplementation libs.mockito.core
    testImplementation libs.mockito.kotlin
    testImplementation libs.mockk
    testImplementation libs.kotlinx.coroutines.test
    testImplementation(libs.apollo.testing.support)

}
